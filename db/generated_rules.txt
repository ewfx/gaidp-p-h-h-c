```json
{
  "rules": [
    {
      "rule": "Customer ID must not be empty",
      "sql": "SELECT CustomerID FROM CorporateLoanDataSchedule WHERE CustomerID IS NULL OR CustomerID = ''"
    },
    {
      "rule": "Internal ID must not be empty",
      "sql": "SELECT InternalObligorID FROM CorporateLoanDataSchedule WHERE InternalObligorID IS NULL OR InternalObligorID = ''"
    },
    {
      "rule": "Original Internal ID must not be empty if it's not the first submission or there's been a change",
      "sql": "SELECT OriginalInternalObligorID FROM CorporateLoanDataSchedule WHERE OriginalInternalObligorID IS NULL OR OriginalInternalObligorID = ''"
    },
    {
      "rule": "Obligor Name must not be empty for non-individual borrowers",
      "sql": "SELECT ObligorName FROM CorporateLoanDataSchedule WHERE ObligorName IS NULL OR ObligorName = '' OR ObligorName = 'Individual'"
    },
    {
      "rule": "Country code must be a valid 2-letter ISO country code.",
      "sql": "SELECT Country FROM CorporateLoanDataSchedule WHERE LENGTH(Country) != 2"
    },
     {
      "rule": "Zip Code must be a 5-digit numeric value for US locations or a valid foreign mailing code.",
      "sql": "SELECT ZipCodeForeignMailingCode FROM CorporateLoanDataSchedule WHERE (ZipCodeForeignMailingCode NOT LIKE '_____' AND NOT LENGTH(ZipCodeForeignMailingCode) > 5)"
    },
    {
      "rule": "Industry Code must be a 4-6 digit number.",
      "sql": "SELECT IndustryCode FROM CorporateLoanDataSchedule WHERE LENGTH(IndustryCode) NOT BETWEEN 4 AND 6 OR IndustryCode NOT LIKE '%[0-9]%'"

    },
    {
      "rule": "Industry Code Type must be one of: 1 (NAICS), 2 (SIC), or 3 (GICS).",
      "sql": "SELECT IndustryCodeType FROM CorporateLoanDataSchedule WHERE IndustryCodeType NOT IN ('1', '2', '3')"
    },
    {
      "rule": "TIN must be in the format ##-#######, ##### ####, or 'NA'.",
      "sql": "SELECT TIN FROM CorporateLoanDataSchedule WHERE TIN NOT LIKE '##-#######' AND TIN NOT LIKE '##### ####' AND TIN != 'NA'"
    },
    {
      "rule": "CUSIP must be a valid 6-digit CUSIP number or 'NA'.",
      "sql": "SELECT CUSIP FROM CorporateLoanDataSchedule WHERE LENGTH(CUSIP) != 6 AND CUSIP != 'NA'"
    },
    {
      "rule": "Internal Credit Facility ID must not be empty and must be unique.",
      "sql": "SELECT InternalCreditFacilityID FROM CorporateLoanDataSchedule WHERE InternalCreditFacilityID IS NULL OR InternalCreditFacilityID = ''"
    }
  ]
}
``````json
{
  "rules": [
    {
      "rule": "Original Internal Credit Facility ID should not contain unprintable characters.",
      "sql": "SELECT OriginalInternalCreditFacilityID FROM CorporateLoanDataSchedule WHERE OriginalInternalCreditFacilityID LIKE '%[^[:print:]]%'"
    },
    {
      "rule": "Origination Date must be in yyyy-mm-dd format.",
      "sql": "SELECT OriginationDate FROM CorporateLoanDataSchedule WHERE NOT OriginationDate LIKE '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'"
    },
    {
      "rule": "Origination Date must be before or equal to the period end date.",
      "sql": "SELECT OriginationDate FROM CorporateLoanDataSchedule WHERE OriginationDate > PeriodEndDate" -- Replace PeriodEndDate with the actual period end date column or value
    },
    {
      "rule": "Maturity Date must be in yyyy-mm-dd format or '9999-01-01'.",
      "sql": "SELECT MaturityDate FROM CorporateLoanDataSchedule WHERE NOT MaturityDate LIKE '^[0-9]{4}-[0-9]{2}-[0-9]{2}$' AND MaturityDate != '9999-01-01'"
    },
    {
      "rule": "Credit Facility Type must be within the allowed values (0-19).",
      "sql": "SELECT FacilityType FROM CorporateLoanDataSchedule WHERE FacilityType NOT IN (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)"
    },
    {
      "rule": "If Credit Facility Type is 'Other' (0), Other Credit Facility Type Description must not be blank.",
      "sql": "SELECT OtherFacilityType FROM CorporateLoanDataSchedule WHERE FacilityType = 0 AND OtherFacilityType IS NULL"
    },
     {
      "rule": "If Credit Facility Type is not 'Other' (0), Other Credit Facility Type Description must be blank.",
      "sql": "SELECT OtherFacilityType FROM CorporateLoanDataSchedule WHERE FacilityType != 0 AND OtherFacilityType IS NOT NULL"
    },
    {
      "rule": "Credit Facility Purpose must be within the allowed values (0-21).",
      "sql": "SELECT CreditFacilityPurpose FROM CorporateLoanDataSchedule WHERE CreditFacilityPurpose NOT IN (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20, 21)"
    }
  ]
}
``````json
{
  "rules": [
    {
      "rule": "Other Credit Facility Purpose Description must be provided if Credit Facility Purpose is 'Other'",
      "sql": "CASE WHEN Other_FacilityPurpose = 'Other' THEN CASE WHEN Other_Credit_Facility_Purpose_Description IS NULL OR Other_Credit_Facility_Purpose_Description = '' THEN 1 ELSE 0 END ELSE 0 END"
    },
    {
      "rule": "Committed Exposure must be a positive whole number",
      "sql": "CASE WHEN CommittedExposure < 0 OR CommittedExposure <> CAST(CommittedExposure AS INT) THEN 1 ELSE 0 END"
    },
    {
      "rule": "Utilized Exposure must be a non-negative whole number",
      "sql": "CASE WHEN UtilizedExposure < 0 OR UtilizedExposure <> CAST(UtilizedExposure AS INT) THEN 1 ELSE 0 END"
    },
    {
      "rule": "Utilized Exposure cannot exceed Committed Exposure",
      "sql": "CASE WHEN UtilizedExposure > CommittedExposure THEN 1 ELSE 0 END"
    },
    {
      "rule": "Line Reported on FR Y-9C must be within the allowed values",
      "sql": "CASE WHEN LineReportedOnFRY9C NOT IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) THEN 1 ELSE 0 END"
    },
     {
      "rule": "Line of Business must not be empty if reported",
      "sql": "CASE WHEN LineOfBusiness IS NULL OR LineOfBusiness = '' THEN 1 ELSE 0 END"
    }
  ]
}
``````json
[
  {
    "rule": "Customer ID (CustomerID) - Not Null and Unique within customer",
    "sql": "SELECT COUNT(*) FROM CorporateLoanData WHERE CustomerID IS NULL UNION ALL SELECT COUNT(*) FROM (SELECT CustomerID, COUNT(*) FROM CorporateLoanData GROUP BY CustomerID HAVING COUNT(*) > 1)"
  },
  {
    "rule": "Internal ID (InternalObligorID) - Not Null and Unique within obligor",
    "sql": "SELECT COUNT(*) FROM CorporateLoanData WHERE InternalObligorID IS NULL UNION ALL SELECT COUNT(*) FROM (SELECT InternalObligorID, COUNT(*) FROM CorporateLoanData GROUP BY InternalObligorID HAVING COUNT(*) > 1)"
  },
  {
    "rule": "Obligor Name (ObligorName) - Not Null or 'Individual'",
    "sql": "SELECT COUNT(*) FROM CorporateLoanData WHERE ObligorName IS NULL OR ObligorName NOT LIKE 'Individual'"
  },
  {
    "rule": "City (City) - Not Null",
    "sql": "SELECT COUNT(*) FROM CorporateLoanData WHERE City IS NULL"
  },
    {
    "rule": "Original Internal Credit Facility ID (OriginalInternalCreditFacilityID) - Format Validation (comma separated IDs)",
    "sql": "SELECT COUNT(*) FROM CorporateLoanData WHERE OriginalInternalCreditFacilityID NOT LIKE '%[, ]%' AND OriginalInternalCreditFacilityID IS NOT NULL AND OriginalInternalCreditFacilityID != ''"
  },
  {
    "rule": "Other Credit Facility Purpose Description (OtherFacilityPurpose) - Required if Credit Facility Purpose is 'Other'",
    "sql": "SELECT COUNT(*) FROM CorporateLoanData WHERE CreditFacilityPurpose = 'Other' AND OtherFacilityPurpose IS NULL"
  },
  {
    "rule": "Cross-reference check: Original Internal ID should match Internal ID for new entries",
    "sql": "SELECT COUNT(*) FROM CorporateLoanData WHERE OriginalInternalObligorID <> InternalObligorID AND OriginalInternalObligorID IS NOT NULL"
  },
  {
    "rule": "Cross-reference check: Original Internal Credit Facility ID should match Internal Credit Facility ID for new entries",
    "sql": "SELECT COUNT(*) FROM CorporateLoanData WHERE OriginalInternalCreditFacilityID <> InternalCreditFacilityID AND OriginalInternalCreditFacilityID IS NOT NULL"

  },
   {
    "rule": "Data Type Check for CustomerID - Integer or appropriate data type",
    "sql": "SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END as IsValid FROM CorporateLoanData WHERE CAST(CustomerID AS INT) IS NULL AND CustomerID IS NOT NULL" 
  },
   {
    "rule": "Data Length Check for ObligorName - reasonable length (e.g., less than 255 characters)",
    "sql": "SELECT COUNT(*) FROM CorporateLoanData WHERE LENGTH(ObligorName) > 255"
  }
]
```


**Explanation of the Rules and SQL Queries:**

* **Null Checks and Uniqueness:**  Several fields are mandatory and some should be unique within a certain context (e.g., `CustomerID` within a customer relationship). The SQL queries check for nulls and duplicate values using `COUNT(*)` and `GROUP BY`.
* **Conditional Checks:** The rule for `OtherFacilityPurpose` demonstrates a conditional check. It ensures that if `CreditFacilityPurpose` is 'Other', then `OtherFacilityPurpose` must have a value.
* **Cross-Reference Checks:** These rules verify consistency between original IDs and current IDs.  This is especially useful for tracking changes over time and ensuring data integrity when updates or modifications are made.
* **Format Validation:** The rule for `OriginalInternalCreditFacilityID` checks that if it's not null or empty, it should adhere to the comma-separated format.
* **Data Type and Length Checks:**  These rules are basic data quality checks.  They ensure that data is stored in the correct format and that string fields don't exceed reasonable lengths.  You can adjust the maximum length (e.g., 255 in the example) as needed.

**Key Improvements and Considerations:**

* **JSON Format:** The rules are presented in JSON format, making them easily parsable by data quality tools and systems.
* **Specific SQL:** The SQL queries are more targeted and address the specific requirements outlined in the provided data dictionary.
* **Data Type Validation:** Added a rule to specifically check the data type of `CustomerID`.  Similar checks can be implemented for other fields based on their expected data types.
* **Length Check:** Included a basic length check for `ObligorName` to prevent excessively long strings.
* **Regular Expressions:** For more complex format validation (e.g., email addresses, postal codes), consider using regular expressions within your SQL queries.
* **Data Quality Tools:**  While these SQL queries are a good starting point, using dedicated data quality tools can significantly enhance your data profiling efforts.  These tools often provide built-in functions and visualizations that simplify the process.


This enhanced set of rules provides a more robust foundation for data profiling your corporate loan data. Remember to adjust the SQL queries and add more rules based on the specific characteristics of your dataset and your business requirements.